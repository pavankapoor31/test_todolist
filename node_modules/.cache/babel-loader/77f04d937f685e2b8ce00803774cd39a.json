{"ast":null,"code":"import _slicedToArray from\"/home/dell/Learn_react/todo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function AddTodo(props){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),Title=_useState2[0],setTitle=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),Desc=_useState4[0],setDesc=_useState4[1];var _useState5=useState([{blankTitle:\"\",numericTitle:\"\",invalidChar:\"\"}]),_useState6=_slicedToArray(_useState5,2),Error=_useState6[0],setError=_useState6[1];var Errors={blankTitle:\"\",numericTitle:\"\",invalidChar:\"\"};var flag=0;// const [ Date,setDate] = useState(\"\");\nvar onSubmit=function onSubmit(e){e.preventDefault();var letters=/^[A-Za-z1-9' '\\'/-]+$/;//Checks if given desc is empty\nif(!Desc||!Title){flag=1;Errors.blankTitle=\"Title/desc Cannot be blank :)\";// alert(\"Title/Description cannot be blank\");\n}//Checks if given title is only numbers \nelse if(!isNaN(Title)){flag=1;Errors.numericTitle=\"Title Cannot be Numeric :)\";// alert(\"Title cannot be numeric\");\n}//Checks if given input has invalid characters \nelse if(!Title.match(letters)){flag=1;// alert(\"Invalid characters\");\nErrors.invalidChar=\"Invalid Characters used :)\";}if(Errors)setError(Errors);//After checks insertion is done (using usestate) below\nif(flag==0){{var tempTitle=Title[0].toUpperCase()+Title.slice(1,Title.length);var tempDesc=Desc[0].toUpperCase()+Desc.slice(1,Desc.length);props.addTodo(tempTitle,tempDesc,props.todo_date);setTitle('');setDesc('');}}};return/*#__PURE__*/_jsx(\"div\",{className:\"AddTodos\",children:/*#__PURE__*/_jsxs(\"form\",{action:\"\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"todoTitle\",children:[\" \",/*#__PURE__*/_jsx(\"h3\",{children:\" Title : \"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:Title,onChange:function onChange(e){return setTitle(e.target.value);},id:\"todoTitle\",name:\"todoTitle\"}),/*#__PURE__*/_jsxs(\"h4\",{className:\"addTodoError\",children:[\" \",Error.numericTitle]}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"todoDesc\",children:[\" \",/*#__PURE__*/_jsx(\"h3\",{children:\"Description : \"}),\" \"]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:Desc,onChange:function onChange(e){return setDesc(e.target.value);},id:\"todoDesc\",name:\"todoDesc\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"h4\",{className:\"addTodoError\",children:[\" \",Error.blankTitle]}),/*#__PURE__*/_jsxs(\"h4\",{className:\"addTodoError\",children:[\" \",Error.invalidChar]}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-green\",type:\"submit\",onClick:onSubmit,children:\" Add TODO\"})]})});}","map":{"version":3,"names":["React","useState","AddTodo","props","Title","setTitle","Desc","setDesc","blankTitle","numericTitle","invalidChar","Error","setError","Errors","flag","onSubmit","e","preventDefault","letters","isNaN","match","tempTitle","toUpperCase","slice","length","tempDesc","addTodo","todo_date","target","value"],"sources":["/home/dell/Learn_react/todo/src/MyComponents/AddTodo.js"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nexport default function AddTodo(props) {\n\n    const [Title, setTitle] = useState(\"\");\n    const [Desc, setDesc] = useState(\"\");\n    const [Error, setError] = useState([\n        {\n            blankTitle: \"\",\n            numericTitle: \"\",\n            invalidChar: \"\"\n        }\n    ]);\n    let Errors = {\n        blankTitle: \"\",\n        numericTitle: \"\",\n        invalidChar: \"\"\n    };\n    let flag=0;\n    // const [ Date,setDate] = useState(\"\");\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        let letters = /^[A-Za-z1-9' '\\'/-]+$/;\n        //Checks if given desc is empty\n        if (!Desc || !Title) {\n            flag=1;\n            Errors.blankTitle = \"Title/desc Cannot be blank :)\";\n            // alert(\"Title/Description cannot be blank\");\n        }\n        //Checks if given title is only numbers \n        else if (!isNaN(Title)) {\n            flag=1;\n            Errors.numericTitle = \"Title Cannot be Numeric :)\";\n            // alert(\"Title cannot be numeric\");\n        }\n        //Checks if given input has invalid characters \n        else if (!Title.match(letters)) {\n            flag=1;\n            // alert(\"Invalid characters\");\n            Errors.invalidChar = \"Invalid Characters used :)\";\n        }\n        if(Errors) setError(Errors);\n        //After checks insertion is done (using usestate) below\n        if(flag==0) {\n        {\n            const tempTitle = Title[0].toUpperCase() + Title.slice(1, Title.length);\n            const tempDesc = Desc[0].toUpperCase() + Desc.slice(1, Desc.length);\n            props.addTodo(tempTitle, tempDesc, props.todo_date);\n            setTitle('');\n            setDesc('');\n        }\n    }\n}\nreturn (\n    <div className=\"AddTodos\">\n        <form action=\"\">\n            <label htmlFor=\"todoTitle\"> <h3> Title : </h3></label>\n            <input type=\"text\" value={Title} onChange={(e) => setTitle(e.target.value)} id=\"todoTitle\" name=\"todoTitle\" />\n            <h4 className=\"addTodoError\"> {Error.numericTitle}</h4>\n            <label htmlFor=\"todoDesc\"> <h3>Description : </h3> </label>\n            <input type=\"text\" value={Desc} onChange={(e) => setDesc(e.target.value)} id=\"todoDesc\" name=\"todoDesc\" />\n            <br />\n            <h4 className=\"addTodoError\"> {Error.blankTitle}</h4>\n            <h4 className=\"addTodoError\"> {Error.invalidChar}</h4>\n            <button className=\"btn btn-green\" type=\"submit\" onClick={onSubmit}> Add TODO</button>\n        </form>\n    </div>\n)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}