{"ast":null,"code":"var _jsxFileName = \"/home/dell/Learn_react/todo/src/MyComponents/AddTodo.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddTodo(props) {\n  _s();\n\n  const [Title, setTitle] = useState(\"\");\n  const [Desc, setDesc] = useState(\"\");\n  const [Error, setError] = useState([{\n    blankTitle: \"\",\n    numericTitle: \"\",\n    invalidChar: \"\"\n  }]);\n  let Errors = {\n    blankTitle: \"\",\n    numericTitle: \"\",\n    invalidChar: \"\"\n  };\n  let flag = 0; // const [ Date,setDate] = useState(\"\");\n\n  const onSubmit = e => {\n    e.preventDefault();\n    let letters = /^[A-Za-z1-9' '\\'/-'.']+$/; //Checks if given desc is empty\n\n    if (!Desc || !Title) {\n      flag = 1;\n      Errors.blankTitle = \"Title/desc Cannot be blank :)\"; // alert(\"Title/Description cannot be blank\");\n    } //Checks if given title is only numbers \n    else if (!isNaN(Title)) {\n      flag = 1;\n      Errors.numericTitle = \"Title Cannot be Numeric :)\"; // alert(\"Title cannot be numeric\");\n    } //Checks if given input has invalid characters \n    else if (!Title.match(letters)) {\n      flag = 1; // alert(\"Invalid characters\");\n\n      Errors.invalidChar = \"Invalid Characters used :)\";\n    }\n\n    if (Errors) setError(Errors); //After checks insertion is done (using usestate) below\n\n    if (flag == 0) {\n      {\n        const tempTitle = Title[0].toUpperCase() + Title.slice(1, Title.length);\n        const tempDesc = Desc[0].toUpperCase() + Desc.slice(1, Desc.length);\n        props.addTodo(tempTitle, tempDesc, props.todo_date);\n        setTitle('');\n        setDesc('');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AddTodos\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"todoTitle\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" Title : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: Title,\n        onChange: e => setTitle(e.target.value),\n        id: \"todoTitle\",\n        name: \"todoTitle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"addTodoError\",\n        children: [\" \", Error.numericTitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"todoDesc\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Description : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 40\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: Desc,\n        onChange: e => setDesc(e.target.value),\n        id: \"todoDesc\",\n        name: \"todoDesc\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"addTodoError\",\n        children: [\" \", Error.blankTitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"addTodoError\",\n        children: [\" \", Error.invalidChar]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-green\",\n        type: \"submit\",\n        onClick: onSubmit,\n        children: \" Add TODO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddTodo, \"lHiFcE5NWsYpmVJr/YytJ6aXXcI=\");\n\n_c = AddTodo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTodo\");","map":{"version":3,"names":["React","useState","AddTodo","props","Title","setTitle","Desc","setDesc","Error","setError","blankTitle","numericTitle","invalidChar","Errors","flag","onSubmit","e","preventDefault","letters","isNaN","match","tempTitle","toUpperCase","slice","length","tempDesc","addTodo","todo_date","target","value"],"sources":["/home/dell/Learn_react/todo/src/MyComponents/AddTodo.js"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nexport default function AddTodo(props) {\n\n    const [Title, setTitle] = useState(\"\");\n    const [Desc, setDesc] = useState(\"\");\n    const [Error, setError] = useState([\n        {\n            blankTitle: \"\",\n            numericTitle: \"\",\n            invalidChar: \"\"\n        }\n    ]);\n    let Errors = {\n        blankTitle: \"\",\n        numericTitle: \"\",\n        invalidChar: \"\"\n    };\n    let flag=0;\n    // const [ Date,setDate] = useState(\"\");\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        let letters = /^[A-Za-z1-9' '\\'/-'.']+$/;\n        //Checks if given desc is empty\n        if (!Desc || !Title) {\n            flag=1;\n            Errors.blankTitle = \"Title/desc Cannot be blank :)\";\n            // alert(\"Title/Description cannot be blank\");\n        }\n        //Checks if given title is only numbers \n        else if (!isNaN(Title)) {\n            flag=1;\n            Errors.numericTitle = \"Title Cannot be Numeric :)\";\n            // alert(\"Title cannot be numeric\");\n        }\n        //Checks if given input has invalid characters \n        else if (!Title.match(letters)) {\n            flag=1;\n            // alert(\"Invalid characters\");\n            Errors.invalidChar = \"Invalid Characters used :)\";\n        }\n        if(Errors) setError(Errors);\n        //After checks insertion is done (using usestate) below\n        if(flag==0) {\n        {\n            const tempTitle = Title[0].toUpperCase() + Title.slice(1, Title.length);\n            const tempDesc = Desc[0].toUpperCase() + Desc.slice(1, Desc.length);\n            props.addTodo(tempTitle, tempDesc, props.todo_date);\n            setTitle('');\n            setDesc('');\n        }\n    }\n}\nreturn (\n    <div className=\"AddTodos\">\n        <form action=\"\">\n            <label htmlFor=\"todoTitle\"> <h3> Title : </h3></label>\n            <input type=\"text\" value={Title} onChange={(e) => setTitle(e.target.value)} id=\"todoTitle\" name=\"todoTitle\" />\n            <h4 className=\"addTodoError\"> {Error.numericTitle}</h4>\n            <label htmlFor=\"todoDesc\"> <h3>Description : </h3> </label>\n            <input type=\"text\" value={Desc} onChange={(e) => setDesc(e.target.value)} id=\"todoDesc\" name=\"todoDesc\" />\n            <br />\n            <h4 className=\"addTodoError\"> {Error.blankTitle}</h4>\n            <h4 className=\"addTodoError\"> {Error.invalidChar}</h4>\n            <button className=\"btn btn-green\" type=\"submit\" onClick={onSubmit}> Add TODO</button>\n        </form>\n    </div>\n)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}